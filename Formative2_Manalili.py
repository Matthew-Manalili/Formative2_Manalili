{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a291949a-4447-4f99-b096-03fcbf70db46",
   "metadata": {},
   "outputs": [],
   "source": [
    "def shift_letter(letter, shift):\n",
    "    if letter==\" \":\n",
    "        return\" \"\n",
    "    else:\n",
    "        if shift>26:\n",
    "            shift=shift%26\n",
    "        letter=letter.upper()\n",
    "        letters=\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
    "        letter=letters[letters.find(letter)+shift]\n",
    "        return letter\n",
    "def caesar_cipher(message,shift):\n",
    "    number_letters=len(message)\n",
    "    added_letter=\"\"\n",
    "    if shift>26:\n",
    "        shift=shift%26\n",
    "    while number_letters!=0:\n",
    "        capitalize=message.upper()\n",
    "        letters=\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
    "        if capitalize[len(capitalize)-number_letters]!=\" \":\n",
    "            add=letters[letters.find(capitalize[len(capitalize)-number_letters])+shift]\n",
    "        else:\n",
    "            add=\" \"\n",
    "        added_letter=added_letter+add\n",
    "        number_letters-=1\n",
    "    shifted_message=added_letter\n",
    "    return shifted_message\n",
    "def shift_by_letter(letter, shift):\n",
    "    letter=letter.upper()\n",
    "    shift=shift.upper()\n",
    "    if letter!=\" \":\n",
    "        letters=\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
    "        letter=letters[letters.find(letter)+letters.find(shift)]\n",
    "        return letter\n",
    "    else:\n",
    "        return \" \"\n",
    "def vigenere_cipher(message,shift):\n",
    "    number_letters=len(message)\n",
    "    number_shift=len(shift)\n",
    "    added_letter=\"\"\n",
    "    while number_letters!=0:\n",
    "        capitalized_message=message.upper()\n",
    "        capitalized_shift=shift.upper()\n",
    "        letters=\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
    "        if number_shift!=0:\n",
    "            if shift[len(capitalized_shift)-number_shift]!=\" \":\n",
    "                shift_amount=letters.find(capitalized_shift[len(capitalized_shift)-number_shift])\n",
    "            else:\n",
    "                shift_amount=0\n",
    "        else:\n",
    "            number_shift=len(shift)\n",
    "            shift_amount=letters.find(capitalized_shift[len(capitalized_shift)-number_shift])\n",
    "        \n",
    "        if capitalized_message[len(capitalized_message)-number_letters]!=\" \":\n",
    "            add=letters[letters.find(capitalized_message[len(capitalized_message)-number_letters])+shift_amount]\n",
    "        else:\n",
    "            add=\" \"\n",
    "        added_letter=added_letter+add\n",
    "        number_letters-=1\n",
    "        number_shift-=1\n",
    "    shifted_message=added_letter\n",
    "    return shifted_message\n",
    "    \n",
    "def scytale_cipher(message,shift):\n",
    "    number_letters=len(message)\n",
    "    encrypted_message=\"\"\n",
    "    i=0\n",
    "    j=0\n",
    "    \n",
    "    if number_letters%shift!=0:\n",
    "        while number_letters%shift!=0:\n",
    "            message=message+\"_\"\n",
    "            number_letters=len(message)\n",
    "    while i!=number_letters/shift:\n",
    "        while j!=shift:\n",
    "            encrypted_message+=message[int(i+(j*(number_letters/shift)))]\n",
    "            j+=1\n",
    "        i+=1\n",
    "        j=0\n",
    "       \n",
    "    return encrypted_message\n",
    "def scytale_decipher(message,shift):\n",
    "    number_letters=len(message)\n",
    "    decrypted_message=\"\"\n",
    "    i=0\n",
    "    j=0\n",
    "    while i!=shift:\n",
    "        while j!=number_letters/shift:\n",
    "            decrypted_message+=message[int(i+(j*shift))]\n",
    "            j+=1\n",
    "        i+=1\n",
    "        j=0\n",
    "    return decrypted_message"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
